apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "123456"
        volumeMounts:
        - name: mysql-data
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-data
        hostPath:
          path: "{{path}}/mysql"

---

apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tensorflow-serving
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tensorflow-serving
  template:
    metadata:
      labels:
        app: tensorflow-serving
    spec:
      containers:
      - name: tensorflow-serving
        image: tensorflow/serving
        env:
        - name: MODEL_NAME
          value: "efficientnet_v2_imagenet21k_ft1k_s"
        ports:
        - containerPort: 8501
        volumeMounts:
        - name: model-data
          mountPath: /models/efficientnet_v2_imagenet21k_ft1k_s/2
      volumes:
      - name: model-data
        hostPath:
          path: "{{path}}/model"

---

apiVersion: v1
kind: Service
metadata:
  name: tensorflow-serving-service
spec:
  selector:
    app: tensorflow-serving
  ports:
    - protocol: TCP
      port: 8501
      targetPort: 8501
  type: ClusterIP

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. Will be used in deployment below.
  name: minio-pv-claim
  labels:
    app: minio-storage-claim
spec:
  # Read more about access modes here: http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    # This is the request for storage. Should be available in the cluster.
    requests:
      storage: 1Gi

---

apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio-deployment
spec:
  selector:
    matchLabels:
      app: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: minio
    spec:
      # Refer to the PVC created earlier
      volumes:
      - name: storage
        persistentVolumeClaim:
          # Name of the PVC created earlier
          claimName: minio-pv-claim
      containers:
      - name: minio
        # Pulls the default Minio image from Docker Hub
        image: minio/minio:latest
        args: ["server", "/storage", "--console-address=:9090"]
        env:
        - name: MINIO_ACCESS_KEY
          value: "root"
        - name: MINIO_SECRET_KEY
          value: "12345678"
        ports:
        - containerPort: 9000
          hostPort: 9000
        - containerPort: 9090
          hostPort: 9090
        # Mount the volume into the pod
        volumeMounts:
        - name: storage # must match the volume name, above
          mountPath: "/storage"

---

apiVersion: v1
kind: Service
metadata:
  name: minio-service
spec:
  selector:
    app: minio
  ports:
  - protocol: TCP
    name: http
    port: 9000
    targetPort: 9000
  - protocol: TCP
    name: console
    port: 9090
    targetPort: 9090
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  labels:
    app: frontend-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend
        image: todo-frontend
        imagePullPolicy: Never
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  internalTrafficPolicy: Cluster
  type: ClusterIP
  selector:
    app: frontend-app
  ports:
  - protocol: TCP
    port: 8080
